<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git提交规范</title>
    <link href="/2024/11/11/25253acba83c/"/>
    <url>/2024/11/11/25253acba83c/</url>
    
    <content type="html"><![CDATA[<h1 id="约定式提交-1-0-0"><a href="#约定式提交-1-0-0" class="headerlink" title="约定式提交 1.0.0"></a>约定式提交 1.0.0</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>约定式提交规范是一种基于提交信息的轻量级约定。<br>它提供了一组简单规则来创建清晰的提交历史；<br>这更有利于编写自动化工具。<br>通过在提交信息中描述功能、修复和破坏性变更，<br>使这种惯例与 <a href="http://semver.org/lang/zh-CN">SemVer</a> 相互对应。</p><p>提交说明的结构如下所示：</p><hr><p>原文：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">&lt;<span class="hljs-keyword">type</span>&gt;[<span class="hljs-keyword">optional</span> scope]: &lt;description&gt;<br><br>[<span class="hljs-keyword">optional</span> body]<br><br>[<span class="hljs-keyword">optional</span> footer(s)]<br></code></pre></td></tr></table></figure><p>译文：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&lt;类型&gt;<span class="hljs-comment">[可选 范围]</span>: &lt;描述&gt;<br><br><span class="hljs-comment">[可选 正文]</span><br><br><span class="hljs-comment">[可选 脚注]</span><br></code></pre></td></tr></table></figure><hr><br />提交说明包含了下面的结构化元素，以向类库使用者表明其意图：<ol><li><strong>fix:</strong> <em>类型</em> 为 <code>fix</code> 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81"><code>PATCH</code></a> 相对应）。</li><li><strong>feat:</strong> <em>类型</em> 为 <code>feat</code> 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81"><code>MINOR</code></a> 相对应）。</li><li><strong>BREAKING CHANGE:</strong> 在脚注中包含 <code>BREAKING CHANGE:</code> 或 &lt;类型&gt;(范围) 后面有一个 <code>!</code> 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81"><code>MAJOR</code></a> 相对应）。<br>破坏性变更可以是任意 <em>类型</em> 提交的一部分。</li><li>除 <code>fix:</code> 和 <code>feat:</code> 之外，也可以使用其它提交 <em>类型</em> ，例如 <a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional">@commitlint&#x2F;config-conventional</a>（基于 <a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines">Angular 约定</a>）中推荐的 <code>build:</code>、<code>chore:</code>、<br>  <code>ci:</code>、<code>docs:</code>、<code>style:</code>、<code>refactor:</code>、<code>perf:</code>、<code>test:</code>，等等。<ul><li>build: 用于修改项目构建系统，例如修改依赖库、外部接口或者升级 Node 版本等；</li><li>chore: 用于对非业务性代码进行修改，例如修改构建流程或者工具配置等；</li><li>ci: 用于修改持续集成流程，例如修改 Travis、Jenkins 等工作流配置；</li><li>docs: 用于修改文档，例如修改 README 文件、API 文档等；</li><li>style: 用于修改代码的样式，例如调整缩进、空格、空行等；</li><li>refactor: 用于重构代码，例如修改代码结构、变量名、函数名等但不修改功能逻辑；</li><li>perf: 用于优化性能，例如提升代码的性能、减少内存占用等；</li><li>test: 用于修改测试用例，例如添加、删除、修改代码的测试用例等。</li></ul></li><li>脚注中除了 <code>BREAKING CHANGE: &lt;description&gt;</code> ，其它条目应该采用类似<br>  <a href="https://git-scm.com/docs/git-interpret-trailers">git trailer format</a> 这样的惯例。</li></ol><p>其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。<br><br /><br /><br>可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 <code>feat(parser): adds ability to parse arrays.</code>。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="包含了描述并且脚注中有破坏性变更的提交说明"><a href="#包含了描述并且脚注中有破坏性变更的提交说明" class="headerlink" title="包含了描述并且脚注中有破坏性变更的提交说明"></a>包含了描述并且脚注中有破坏性变更的提交说明</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">feat:</span> allow provided <span class="hljs-built_in">config</span> object to <span class="hljs-keyword">extend </span>other configs<br><br><span class="hljs-keyword">BREAKING </span>CHANGE: `<span class="hljs-keyword">extends` </span>key in <span class="hljs-built_in">config</span> file is now used for <span class="hljs-keyword">extending </span>other <span class="hljs-built_in">config</span> files<br></code></pre></td></tr></table></figure><h3 id="包含了-字符以提醒注意破坏性变更的提交说明"><a href="#包含了-字符以提醒注意破坏性变更的提交说明" class="headerlink" title="包含了 ! 字符以提醒注意破坏性变更的提交说明"></a>包含了 <code>!</code> 字符以提醒注意破坏性变更的提交说明</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">feat!: <span class="hljs-built_in">send</span> <span class="hljs-keyword">an</span> email <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> customer when <span class="hljs-keyword">a</span> product is shipped<br></code></pre></td></tr></table></figure><h3 id="包含了范围和破坏性变更-的提交说明"><a href="#包含了范围和破坏性变更-的提交说明" class="headerlink" title="包含了范围和破坏性变更 ! 的提交说明"></a>包含了范围和破坏性变更 <code>!</code> 的提交说明</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">feat(api)!: <span class="hljs-built_in">send</span> <span class="hljs-keyword">an</span> email <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> customer when <span class="hljs-keyword">a</span> product is shipped<br></code></pre></td></tr></table></figure><h3 id="包含了-和-BREAKING-CHANGE-脚注的提交说明"><a href="#包含了-和-BREAKING-CHANGE-脚注的提交说明" class="headerlink" title="包含了 ! 和 BREAKING CHANGE 脚注的提交说明"></a>包含了 <code>!</code> 和 BREAKING CHANGE 脚注的提交说明</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chore!: drop support for <span class="hljs-keyword">Node</span> <span class="hljs-title">6</span><br><br>BREAKING CHANGE: use JavaScript features not available <span class="hljs-keyword">in</span> <span class="hljs-keyword">Node</span> <span class="hljs-title">6</span>.<br></code></pre></td></tr></table></figure><h3 id="不包含正文的提交说明"><a href="#不包含正文的提交说明" class="headerlink" title="不包含正文的提交说明"></a>不包含正文的提交说明</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">docs:</span> correct spelling of CHANGELOG<br></code></pre></td></tr></table></figure><h3 id="包含范围的提交说明"><a href="#包含范围的提交说明" class="headerlink" title="包含范围的提交说明"></a>包含范围的提交说明</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">feat</span><span class="hljs-params">(lang)</span></span>: add polish language<br></code></pre></td></tr></table></figure><h3 id="包含多行正文和多行脚注的提交说明"><a href="#包含多行正文和多行脚注的提交说明" class="headerlink" title="包含多行正文和多行脚注的提交说明"></a>包含多行正文和多行脚注的提交说明</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript">fix: prevent racing <span class="hljs-keyword">of</span> requests<br><br>Introduce a request <span class="hljs-built_in">id</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">a reference</span> <span class="hljs-keyword">to</span> latest request. Dismiss<br>incoming responses other than <span class="hljs-keyword">from</span> latest request.<br><br>Remove timeouts which were used <span class="hljs-keyword">to</span> mitigate <span class="hljs-keyword">the</span> racing issue <span class="hljs-keyword">but</span> are<br>obsolete now.<br><br>Reviewed-<span class="hljs-keyword">by</span>: Z<br>Refs: <span class="hljs-comment">#123</span><br></code></pre></td></tr></table></figure><h2 id="约定式提交规范"><a href="#约定式提交规范" class="headerlink" title="约定式提交规范"></a>约定式提交规范</h2><p>本文中的关键词 “必须（MUST）”、“禁止（MUST NOT）”、“必要（REQUIRED）”、“应当（SHALL）”、“不应当（SHALL NOT）”、“应该（SHOULD）”、“不应该（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）” 和 “可选（OPTIONAL）” ，其相关解释参考 <a href="https://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a> 。</p><ol><li>每个提交都<strong>必须</strong>使用类型字段前缀，它由一个名词构成，诸如 <code>feat</code> 或 <code>fix</code> ，<br>  其后接<strong>可选的</strong>范围字段，<strong>可选的</strong> <code>!</code>，以及<strong>必要的</strong>冒号（英文半角）和空格。</li><li>当一个提交为应用或类库实现了新功能时，<strong>必须</strong>使用 <code>feat</code> 类型。</li><li>当一个提交为应用修复了 bug 时，<strong>必须</strong>使用 <code>fix</code> 类型。</li><li>范围字段<strong>可以</strong>跟随在类型字段后面。范围<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围，例如： <code>fix(parser):</code></li><li>描述字段<strong>必须</strong>直接跟在 &lt;类型&gt;(范围) 前缀的冒号和空格之后。<br>  描述指的是对代码变更的简短总结，例如： <em>fix: array parsing issue when multiple spaces were contained in string</em> 。</li><li>在简短描述之后，<strong>可以</strong>编写较长的提交正文，为代码变更提供额外的上下文信息。正文<strong>必须</strong>起始于描述字段结束的一个空行后。</li><li>提交的正文内容自由编写，并<strong>可以</strong>使用空行分隔不同段落。</li><li>在正文结束的一个空行之后，<strong>可以</strong>编写一行或多行脚注。每行脚注都<strong>必须</strong>包含<br>  一个令牌（token），后面紧跟 <code>:&lt;space&gt;</code> 或 <code>&lt;space&gt;#</code> 作为分隔符，后面再紧跟令牌的值（受<br>  <a href="https://git-scm.com/docs/git-interpret-trailers">git trailer convention</a> 启发）。</li><li>脚注的令牌<strong>必须</strong>使用 <code>-</code> 作为连字符，比如 <code>Acked-by</code> (这样有助于<br>  区分脚注和多行正文)。有一种例外情况就是 <code>BREAKING CHANGE</code>，它<strong>可以</strong>被认为是一个令牌。</li><li>脚注的值<strong>可以</strong>包含空格和换行，值的解析过程<strong>必须</strong>直到下一个脚注的令牌&#x2F;分隔符出现为止。</li><li>破坏性变更<strong>必须</strong>在提交信息中标记出来，要么在 &lt;类型&gt;(范围) 前缀中标记，要么作为脚注的一项。</li><li>包含在脚注中时，破坏性变更<strong>必须</strong>包含大写的文本 <code>BREAKING CHANGE</code>，后面紧跟着冒号、空格，然后是描述，例如：<br>  <em>BREAKING CHANGE: environment variables now take precedence over config files</em> 。</li><li>包含在 &lt;类型&gt;(范围) 前缀时，破坏性变更<strong>必须</strong>通过把 <code>!</code> 直接放在 <code>:</code> 前面标记出来。<br>  如果使用了 <code>!</code>，那么脚注中<strong>可以</strong>不写 <code>BREAKING CHANGE:</code>，<br>  同时提交信息的描述中<strong>应该</strong>用来描述破坏性变更。</li><li>在提交说明中，<strong>可以</strong>使用 <code>feat</code> 和 <code>fix</code> 之外的类型，比如：<em>docs: updated ref docs.</em> 。</li><li>工具的实现必须<strong>不区分</strong>大小写地解析构成约定式提交的信息单元，只有 <code>BREAKING CHANGE</code> <strong>必须</strong>是大写的。</li><li>BREAKING-CHANGE 作为脚注的令牌时<strong>必须</strong>是 BREAKING CHANGE 的同义词。</li></ol><h2 id="为什么使用约定式提交"><a href="#为什么使用约定式提交" class="headerlink" title="为什么使用约定式提交"></a>为什么使用约定式提交</h2><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="在初始开发阶段我该如何处理提交说明？"><a href="#在初始开发阶段我该如何处理提交说明？" class="headerlink" title="在初始开发阶段我该如何处理提交说明？"></a>在初始开发阶段我该如何处理提交说明？</h3><p>我们建议你按照假设你已发布了产品那样来处理。因为通常总 <em>有人</em> 使用你的软件，即便那是你软件开发的同事们。他们会希望知道诸如修复了什么、哪里不兼容等信息。</p><h3 id="提交标题中的类型是大写还是小写"><a href="#提交标题中的类型是大写还是小写" class="headerlink" title="提交标题中的类型是大写还是小写?"></a>提交标题中的类型是大写还是小写?</h3><p>大小写都可以，但最好是一致的。</p><h3 id="如果提交符合多种类型我该如何操作？"><a href="#如果提交符合多种类型我该如何操作？" class="headerlink" title="如果提交符合多种类型我该如何操作？"></a>如果提交符合多种类型我该如何操作？</h3><p>回退并尽可能创建多次提交。约定式提交的好处之一是能够促使我们做出更有组织的提交和 PR。</p><h3 id="这不会阻碍快速开发和迭代吗？"><a href="#这不会阻碍快速开发和迭代吗？" class="headerlink" title="这不会阻碍快速开发和迭代吗？"></a>这不会阻碍快速开发和迭代吗？</h3><p>它阻碍的是以杂乱无章的方式快速前进。它助你能在横跨多个项目以及和多个贡献者协作时长期地快速演进。</p><h3 id="约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？"><a href="#约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？" class="headerlink" title="约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？"></a>约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？</h3><p>约定式提交鼓励我们更多地使用某些类型的提交，比如 <code>fixes</code>。除此之外，约定式提交的灵活性也允许你的团队使用自己的类型，并随着时间的推移更改这些类型。</p><h3 id="这和-SemVer-有什么关联呢？"><a href="#这和-SemVer-有什么关联呢？" class="headerlink" title="这和 SemVer 有什么关联呢？"></a>这和 SemVer 有什么关联呢？</h3><p><code>fix</code> 类型提交应当对应到 <code>PATCH</code> 版本。<code>feat</code> 类型提交应该对应到 <code>MINOR</code> 版本。带有 <code>BREAKING CHANGE</code> 的提交不管类型如何，都应该对应到 <code>MAJOR</code> 版本。</p><h3 id="我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展，该如何版本化管理这些扩展呢？"><a href="#我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展，该如何版本化管理这些扩展呢？" class="headerlink" title="我对约定式提交做了形如 @jameswomack/conventional-commit-spec 的扩展，该如何版本化管理这些扩展呢？"></a>我对约定式提交做了形如 <code>@jameswomack/conventional-commit-spec</code> 的扩展，该如何版本化管理这些扩展呢？</h3><p>我们推荐使用 SemVer 来发布你对于这个规范的扩展（并鼓励你创建这些扩展！）</p><h3 id="如果我不小心使用了错误的提交类型，该怎么办呢？"><a href="#如果我不小心使用了错误的提交类型，该怎么办呢？" class="headerlink" title="如果我不小心使用了错误的提交类型，该怎么办呢？"></a>如果我不小心使用了错误的提交类型，该怎么办呢？</h3><h4 id="当你使用了在规范中但错误的类型时，例如将-feat-写成了-fix"><a href="#当你使用了在规范中但错误的类型时，例如将-feat-写成了-fix" class="headerlink" title="当你使用了在规范中但错误的类型时，例如将 feat 写成了 fix"></a>当你使用了在规范中但错误的类型时，例如将 <code>feat</code> 写成了 <code>fix</code></h4><p>在合并或发布这个错误之前，我们建议使用 <code>git rebase -i</code> 来编辑提交历史。而在发布之后，根据你使用的工具和流程不同，会有不同的清理方案。</p><h4 id="当使用了-不在-规范中的类型时，例如将-feat-写成了-feet"><a href="#当使用了-不在-规范中的类型时，例如将-feat-写成了-feet" class="headerlink" title="当使用了 不在 规范中的类型时，例如将 feat 写成了 feet"></a>当使用了 <em>不在</em> 规范中的类型时，例如将 <code>feat</code> 写成了 <code>feet</code></h4><p>在最坏的场景下，即便提交没有满足约定式提交的规范，也不会是世界末日。这只意味着这个提交会被基于规范的工具错过而已。</p><h3 id="所有的贡献者都需要使用约定式提交规范吗？"><a href="#所有的贡献者都需要使用约定式提交规范吗？" class="headerlink" title="所有的贡献者都需要使用约定式提交规范吗？"></a>所有的贡献者都需要使用约定式提交规范吗？</h3><p>并不！如果你使用基于 squash 的 Git 工作流，主管维护者可以在合并时清理提交信息——这不会对普通提交者产生额外的负担。<br>有种常见的工作流是让 git 系统自动从 pull request 中 squash 出提交，并向主管维护者提供一份表单，用以在合并时输入合适的 git 提交信息。</p><h3 id="约定式提交规范中如何处理还原（revert）提交"><a href="#约定式提交规范中如何处理还原（revert）提交" class="headerlink" title="约定式提交规范中如何处理还原（revert）提交?"></a>约定式提交规范中如何处理还原（revert）提交?</h3><p>还原提交（Reverting）会比较复杂：你还原的是多个提交吗？如果你还原了一个功能模块，下次发布的应该是补丁吗？</p><p>约定式提交不能明确的定义还原行为。所以我们把这个问题留给工具开发者，<br>基于 <em>类型</em> 和 <em>脚注</em> 的灵活性来开发他们自己的还原处理逻辑。</p><p>一种建议是使用 <code>revert</code> 类型，和一个指向被还原提交摘要的脚注：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">revert:</span> <span class="hljs-keyword">let</span> us never again speak <span class="hljs-keyword">of</span> the noodle incident<br><br><span class="hljs-symbol">Refs:</span> <span class="hljs-number">676104</span>e, a215868<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>提交规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将系统磁盘未使用的部分格式化并重新分配给/（根目录）</title>
    <link href="/2024/09/10/06581acfb49d/"/>
    <url>/2024/09/10/06581acfb49d/</url>
    
    <content type="html"><![CDATA[<blockquote><p>公司有一个新的小需求，要求将几台虚拟机的&#x2F;（根目录）扩容一下。<br>但是因为之前采用的模板存在一些问题，现在是磁盘大小为256GB，只格式化并使用了30GB，所以需要在这个基础之上，要求不停机无损重建分区，并且扩容xfs格式的&#x2F;（根目录）。</p></blockquote><hr><h1 id="1-情况排查"><a href="#1-情况排查" class="headerlink" title="1.情况排查"></a>1.情况排查</h1><p>首先查看一下磁盘的基本情况：</p><p>使用<code>fdisk -l</code>查看磁盘基本情况</p><img src="/2024/09/10/06581acfb49d/%E7%A3%81%E7%9B%98%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B51.png" class="" title="磁盘基本情况"><p>可以看到在<code>fdisk</code>命令中，<code>/dev/vda</code>的大小为256GB，而<code>/dev/vda1</code>和<code>/dev/vda2</code>都加起来总共只有30GB大小，而根目录的lv卷只有25.102GB大小。</p><p>本次的目标就是将&#x2F;dev&#x2F;vda的全部容量使用上，并且将现在未使用的磁盘容量给附加到根目录之下。</p><h1 id="2-重新创建分区"><a href="#2-重新创建分区" class="headerlink" title="2.重新创建分区"></a>2.重新创建分区</h1><p>我们要做的第一件事，就是通过<code>fdisk</code>命令，重新创建分区，将剩余未用的容量合并到&#x2F;dev&#x2F;vda2内。</p><blockquote><p>注意！下面操作有风险，请再三确认后谨慎执行！</p></blockquote><p>此操作的必要前提条件为：<strong>待扩容的分区必须和未使用的磁盘扇区相邻</strong></p><p>此操作的原理就是重新设置分区的结束扇区位置，所以本操作对应的分区的结束扇区必须和未使用的磁盘的开始扇区相邻，其中不能有任何其他的分区，否则将不能进行此操作。若强制执行，会导致相隔的分区数据丢失！</p><p>使用<code>fdisk /dev/vda</code>进入分区操作界面，输入i，输入对应的位置数字（一般为最后一个），确认是否是待扩容的分区。</p><img src="/2024/09/10/06581acfb49d/fdisk1.png" class="" title="使用fdisk查看分区情况"><blockquote><p>数据无价！下述操作可能会导致数据丢失，请再三确认后谨慎操作，一定要确认待操作的分区满足上述条件！</p></blockquote><p>确认无误后，输入d，输入刚刚确定的分区位置数字（我这里为2），回车删除分区。</p><img src="/2024/09/10/06581acfb49d/fdisk2.png" class="" title="删除分区"><p>输入n，再次创建分区，并且将分区结束位置选为最后一个扇区。</p><p>回车后若出现<code>Do you want to remove the signature? [Y]es/[N]o: </code>,输入n，千万别输入y，否则会清理lvm的标识符，导致无法正常读取磁盘！</p><img src="/2024/09/10/06581acfb49d/fdisk3.png" class="" title="重建分区"><p>最后输入w，写入磁盘。再次使用<code>fdisk -l</code>查看分区是否正常变化。</p><img src="/2024/09/10/06581acfb49d/fdisk4.png" class="" title="写入分区并验证"><p>可以看到分区<code>/dev/vda2</code>大小已改变，但是对应的lv卷大小并没有改变，还需要通过调整pv、vg来扩容lv卷。</p><h1 id="3-扩容根目录"><a href="#3-扩容根目录" class="headerlink" title="3.扩容根目录"></a>3.扩容根目录</h1><p>首先使用<code>pvresize</code>命令来重新划分pv大小。</p><blockquote><p>注：<code>pvresize</code>命令后面需要跟具体的磁盘分区</p></blockquote><p>这里使用命令:<code>pvresize /dev/vda2</code>来重新划分pv大小，划分后使用<code>pvdisplay</code>查看是否有新的Free PE空间。</p><img src="/2024/09/10/06581acfb49d/%E9%87%8D%E6%96%B0%E5%88%92%E5%88%86pv%E5%A4%A7%E5%B0%8F.png" class="" title="重新划分pv大小"><p>可以看到Free PE已经有多余的空间了，下面使用<code>lvextend</code>命令将空闲的空间全部划分给根目录所在的vg内</p><blockquote><p>注：<code>lvextend</code>命令后面需要跟逻辑卷路径</p></blockquote><p>这里使用命令<code>lvextend -l +100%FREE /dev/mapper/klas-root</code>将空闲空间全部划分给根目录。</p><img src="/2024/09/10/06581acfb49d/%E5%B0%86%E7%A9%BA%E4%BD%99%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86%E7%BB%99vg.png" class="" title="将空余空间划分给vg"><p>随后使用<code>xfs_growfs /</code>命令扩展XFS文件系统，操作完后，再次使用fdisk -l查看空间是否正常划分。</p><img src="/2024/09/10/06581acfb49d/%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C.png" class="" title="最终结果"><p>可以看到，根目录已按照预想正确扩容。</p><p>至此，本文结束。</p>]]></content>
    
    
    
    <tags>
      
      <tag>根目录扩容</tag>
      
      <tag>重建并扩容分区</tag>
      
      <tag>LVM</tag>
      
      <tag>xfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何通过GitHub Page+Hexo+Cloudflare建立一个像这样的私人博客及踩坑</title>
    <link href="/2023/10/31/ceac5d99f560/"/>
    <url>/2023/10/31/ceac5d99f560/</url>
    
    <content type="html"><![CDATA[<blockquote><p>很早之前通过自建云服务器 利用WordPress搭建过一个博客，也是建立过一个博客。无奈自己太懒，又不想为服务器付费，所以就没在管它。近期有这个想法，想把这个事情做起来，写写博客是一个很好的习惯，能够总结各种失败案例。即使是很忙，也要定期，抽时间写。</p></blockquote><hr><p>闲话少序，直接开始。</p><p>先把连接补上，坑等明天在高铁上补。</p><p><a href="https://www.cnblogs.com/yuelblog/p/15829774.html">GitHub pages+自定义域名(腾讯云域名)+cloudflare加速</a></p><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages">自定义域和 GitHub Pages 疑难解答</a></p><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">管理 GitHub Pages 站点的自定义域</a></p><p><a href="https://support.google.com/analytics/answer/9744165#zippy=%2Cin-this-article%2C%E6%9C%AC%E6%96%87%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%BB%E9%A2%98">向已设置 Analytics 的网站添加 Google Analytics（分析）4 媒体资源</a></p><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites">关于 GitHub Pages</a></p><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">关于自定义域名和 GitHub 页面</a></p><p><a href="https://blog.csdn.net/qq_37126941/article/details/122540553">使用 CloudFlare 导致网站「重定向的次数过多」解决方案</a></p><p><a href="https://analytics.google.com/analytics/web/provision/#/a291456280p414017242/admin/streams/table/">Google分析</a></p><p><a href="https://www.zhihu.com/question/312649050">作为一名程序员应该怎样设置自己的头像?有哪些头像推荐?</a></p><p><a href="https://octodex.github.com/">Github Octodex</a></p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程(主要)</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>博客</tag>
      
      <tag>Github Pages</tag>
      
      <tag>Hexo</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
